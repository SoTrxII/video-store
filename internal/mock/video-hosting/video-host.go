// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/video-hosting/video-host.go

// Package mock_video_hosting is a generated GoMock package.
package mock_video_hosting

import (
	io "io"
	reflect "reflect"
	video_hosting "video-manager/internal/video-hosting"

	gomock "github.com/golang/mock/gomock"
)

// MockIVideoHost is a mock of IVideoHost interface.
type MockIVideoHost struct {
	ctrl     *gomock.Controller
	recorder *MockIVideoHostMockRecorder
}

// MockIVideoHostMockRecorder is the mock recorder for MockIVideoHost.
type MockIVideoHostMockRecorder struct {
	mock *MockIVideoHost
}

// NewMockIVideoHost creates a new mock instance.
func NewMockIVideoHost(ctrl *gomock.Controller) *MockIVideoHost {
	mock := &MockIVideoHost{ctrl: ctrl}
	mock.recorder = &MockIVideoHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVideoHost) EXPECT() *MockIVideoHostMockRecorder {
	return m.recorder
}

// AddVideoToPlaylist mocks base method.
func (m *MockIVideoHost) AddVideoToPlaylist(videoId, playlistId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVideoToPlaylist", videoId, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVideoToPlaylist indicates an expected call of AddVideoToPlaylist.
func (mr *MockIVideoHostMockRecorder) AddVideoToPlaylist(videoId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVideoToPlaylist", reflect.TypeOf((*MockIVideoHost)(nil).AddVideoToPlaylist), videoId, playlistId)
}

// CreatePlaylist mocks base method.
func (m *MockIVideoHost) CreatePlaylist(meta *video_hosting.ItemMetadata) (*video_hosting.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylist", meta)
	ret0, _ := ret[0].(*video_hosting.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockIVideoHostMockRecorder) CreatePlaylist(meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockIVideoHost)(nil).CreatePlaylist), meta)
}

// CreateVideo mocks base method.
func (m *MockIVideoHost) CreateVideo(meta *video_hosting.ItemMetadata, uploadContent io.Reader, onProgress *video_hosting.ProgressFunc) (*video_hosting.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVideo", meta, uploadContent, onProgress)
	ret0, _ := ret[0].(*video_hosting.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVideo indicates an expected call of CreateVideo.
func (mr *MockIVideoHostMockRecorder) CreateVideo(meta, uploadContent, onProgress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVideo", reflect.TypeOf((*MockIVideoHost)(nil).CreateVideo), meta, uploadContent, onProgress)
}

// DeletePlaylist mocks base method.
func (m *MockIVideoHost) DeletePlaylist(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaylist", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlaylist indicates an expected call of DeletePlaylist.
func (mr *MockIVideoHostMockRecorder) DeletePlaylist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaylist", reflect.TypeOf((*MockIVideoHost)(nil).DeletePlaylist), id)
}

// DeleteVideo mocks base method.
func (m *MockIVideoHost) DeleteVideo(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVideo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVideo indicates an expected call of DeleteVideo.
func (mr *MockIVideoHostMockRecorder) DeleteVideo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVideo", reflect.TypeOf((*MockIVideoHost)(nil).DeleteVideo), id)
}

// GetVideoAccessPrefix mocks base method.
func (m *MockIVideoHost) GetVideoAccessPrefix() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoAccessPrefix")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVideoAccessPrefix indicates an expected call of GetVideoAccessPrefix.
func (mr *MockIVideoHostMockRecorder) GetVideoAccessPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoAccessPrefix", reflect.TypeOf((*MockIVideoHost)(nil).GetVideoAccessPrefix))
}

// RetrievePlaylist mocks base method.
func (m *MockIVideoHost) RetrievePlaylist(id string) (*video_hosting.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrievePlaylist", id)
	ret0, _ := ret[0].(*video_hosting.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePlaylist indicates an expected call of RetrievePlaylist.
func (mr *MockIVideoHostMockRecorder) RetrievePlaylist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePlaylist", reflect.TypeOf((*MockIVideoHost)(nil).RetrievePlaylist), id)
}

// RetrieveVideo mocks base method.
func (m *MockIVideoHost) RetrieveVideo(id string) (*video_hosting.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveVideo", id)
	ret0, _ := ret[0].(*video_hosting.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveVideo indicates an expected call of RetrieveVideo.
func (mr *MockIVideoHostMockRecorder) RetrieveVideo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveVideo", reflect.TypeOf((*MockIVideoHost)(nil).RetrieveVideo), id)
}

// UpdatePlaylist mocks base method.
func (m *MockIVideoHost) UpdatePlaylist(id string, replacement *video_hosting.Playlist) (*video_hosting.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylist", id, replacement)
	ret0, _ := ret[0].(*video_hosting.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaylist indicates an expected call of UpdatePlaylist.
func (mr *MockIVideoHostMockRecorder) UpdatePlaylist(id, replacement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylist", reflect.TypeOf((*MockIVideoHost)(nil).UpdatePlaylist), id, replacement)
}

// UpdateVideo mocks base method.
func (m *MockIVideoHost) UpdateVideo(id string, replacement *video_hosting.Video) (*video_hosting.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", id, replacement)
	ret0, _ := ret[0].(*video_hosting.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVideo indicates an expected call of UpdateVideo.
func (mr *MockIVideoHostMockRecorder) UpdateVideo(id, replacement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockIVideoHost)(nil).UpdateVideo), id, replacement)
}

// UpdateVideoThumbnail mocks base method.
func (m *MockIVideoHost) UpdateVideoThumbnail(videoId string, thumbnailContent io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideoThumbnail", videoId, thumbnailContent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideoThumbnail indicates an expected call of UpdateVideoThumbnail.
func (mr *MockIVideoHostMockRecorder) UpdateVideoThumbnail(videoId, thumbnailContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoThumbnail", reflect.TypeOf((*MockIVideoHost)(nil).UpdateVideoThumbnail), videoId, thumbnailContent)
}
