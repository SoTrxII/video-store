// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/progress-broker/progress-broker.go

// Package mock_progress_broker is a generated GoMock package.
package mock_progress_broker

import (
	context "context"
	reflect "reflect"

	client "github.com/dapr/go-sdk/client"
	gomock "github.com/golang/mock/gomock"
)

// MockPubSubProxy is a mock of PubSubProxy interface.
type MockPubSubProxy struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubProxyMockRecorder
}

// MockPubSubProxyMockRecorder is the mock recorder for MockPubSubProxy.
type MockPubSubProxyMockRecorder struct {
	mock *MockPubSubProxy
}

// NewMockPubSubProxy creates a new mock instance.
func NewMockPubSubProxy(ctrl *gomock.Controller) *MockPubSubProxy {
	mock := &MockPubSubProxy{ctrl: ctrl}
	mock.recorder = &MockPubSubProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubProxy) EXPECT() *MockPubSubProxyMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method.
func (m *MockPubSubProxy) PublishEvent(ctx context.Context, pubsubName, topicName string, data interface{}, opts ...client.PublishEventOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pubsubName, topicName, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishEvent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockPubSubProxyMockRecorder) PublishEvent(ctx, pubsubName, topicName, data interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pubsubName, topicName, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockPubSubProxy)(nil).PublishEvent), varargs...)
}
